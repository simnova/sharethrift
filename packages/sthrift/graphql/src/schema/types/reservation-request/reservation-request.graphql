type ReservationRequest {
	id: ObjectID!
	state: ReservationRequestState
	reservationPeriodStart: DateTime
	reservationPeriodEnd: DateTime
	createdAt: DateTime
	updatedAt: DateTime
	listing: ItemListing
	reserver: PersonalUser
	closeRequestedBySharer: Boolean
	closeRequestedByReserver: Boolean
}

enum ReservationRequestState {
	Requested
	Accepted
	Rejected
	Closed
	Cancelled
}

extend type Query {
	myActiveReservations(userId: ObjectID!): [ReservationRequest!]!
	myPastReservations(userId: ObjectID!): [ReservationRequest!]!
	myListingsRequests(
		page: Int!
		pageSize: Int!
		searchText: String!
		statusFilters: [String!]!
		sorter: SorterInput!
		sharerId: ObjectID!
	): ListingRequestPage!
	myActiveReservationForListing(
		listingId: ObjectID!
		userId: ObjectID!
	): ReservationRequest
	overlapActiveReservationRequestsForListing(
		listingId: ObjectID!
		reservationPeriodStart: DateTime!
		reservationPeriodEnd: DateTime!
	): [ReservationRequest!]!
	queryActiveByListingId(listingId: ObjectID!): [ReservationRequest]!
}

extend type Mutation {
	createReservationRequest(
		input: CreateReservationRequestInput!
	): ReservationRequest!
	acceptReservationRequest(
		input: AcceptReservationRequestInput!
	): ReservationRequest!
	cancelReservation(input: CancelReservationInput!): ReservationRequest!
	closeReservation(input: CloseReservationInput!): ReservationRequest!
}

type ReservationRequestMutationResult implements MutationResult {
	status: MutationStatus!
	reservationRequest: ReservationRequest
}

input CreateReservationRequestInput {
	listingId: ObjectID!
	reservationPeriodStart: DateTime!
	reservationPeriodEnd: DateTime!
}

input AcceptReservationRequestInput {
	reservationRequestId: ObjectID!
}

input CancelReservationInput {
	id: ObjectID!
}

input CloseReservationInput {
	id: ObjectID!
}
