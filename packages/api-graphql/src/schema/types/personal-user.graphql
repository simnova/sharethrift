#graphql
"""
GraphQL schema for Personal Users
"""
type PersonalUser implements MongoBase {
  userType: String!
  isBlocked: Boolean!
  account: PersonalUserAccount!

  id: ObjectID!
  schemaVersion: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PersonalUserAccount {
  accountType: String!
  email: String!
  username: String!
  profile: PersonalUserAccountProfile!
}

type PersonalUserAccountProfile {
  firstName: String!
  lastName: String!
  location: PersonalUserAccountProfileLocation!
  billing: PersonalUserAccountProfileBilling
}

type PersonalUserAccountProfileLocation {
  address1: String!
  address2: String
  city: String!
  state: String!
  country: String!
  zipCode: String!
}

type PersonalUserAccountProfileBilling {
  subscriptionId: String
  cybersourceCustomerId: String
}

input PersonalUserCreateInput {
  userType: String!
  account: PersonalUserAccountInput!
}

input PersonalUserAccountInput {
  accountType: String!
  email: String!
  username: String!
  profile: PersonalUserAccountProfileInput!
}

input PersonalUserAccountProfileInput {
  firstName: String!
  lastName: String!
  location: PersonalUserAccountProfileLocationInput!
  billing: PersonalUserAccountProfileBillingInput
}

input PersonalUserAccountProfileLocationInput {
  address1: String!
  address2: String
  city: String!
  state: String!
  country: String!
  zipCode: String!
}

input PersonalUserAccountProfileBillingInput {
  subscriptionId: String
  cybersourceCustomerId: String
}

input PersonalUserUpdateInput {
  userType: String
  isBlocked: Boolean
  account: PersonalUserAccountUpdateInput
}

input PersonalUserAccountUpdateInput {
  accountType: String
  email: String
  username: String
  profile: PersonalUserAccountProfileUpdateInput
}

input PersonalUserAccountProfileUpdateInput {
  firstName: String
  lastName: String
  location: PersonalUserAccountProfileLocationUpdateInput
  billing: PersonalUserAccountProfileBillingUpdateInput
}

input PersonalUserAccountProfileLocationUpdateInput {
  address1: String
  address2: String
  city: String
  state: String
  country: String
  zipCode: String
}

input PersonalUserAccountProfileBillingUpdateInput {
  subscriptionId: String
  cybersourceCustomerId: String
}

extend type Query {
  # Personal User queries
  personalUserById(id: ObjectID!): PersonalUser
  currentEndUserAndCreateIfNotExists: PersonalUser!
}

# type Mutation {
#   # Personal User mutations
#   personalUserUpdate(id: ObjectID!, input: PersonalUserUpdateInput!): PersonalUser!
# }
