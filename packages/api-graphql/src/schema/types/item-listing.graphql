type ItemListing {
  id: ObjectId!
  sharer: ObjectId!
  title: String!
  description: String!
  category: String!
  location: String!
  sharingPeriodStart: DateTime!
  sharingPeriodEnd: DateTime!
  state: ItemListingState
  createdAt: DateTime
  updatedAt: DateTime
  sharingHistory: [ObjectId!]
  reports: Int
}

enum ItemListingState {
  Published
  Paused
  Cancelled
  Drafted
  Expired
  Blocked
  AppealRequested
}

# My Listings DTOs
type ListingAllDTO {
  id: String!
  title: String!
  image: String
  publishedAt: DateTime!
  reservationPeriod: DateRange!
  status: ListingStatus!
  pendingRequestsCount: Int!
}

type ListingRequestDTO {
  id: String!
  title: String!
  image: String
  requestedBy: String!
  requestedOn: DateTime!
  reservationPeriod: DateRange!
  status: RequestStatus!
}

type DateRange {
  start: DateTime!
  end: DateTime!
}

enum ListingStatus {
  Active
  Paused
  Reserved
  Expired
  Draft
  Blocked
}

enum RequestStatus {
  Accepted
  Rejected
  Closed
  Pending
  Closing
}

# Paginated result types
type ListingAllPage {
  items: [ListingAllDTO!]!
  total: Int!
  page: Int!
  pageSize: Int!
}

type ListingRequestPage {
  items: [ListingRequestDTO!]!
  total: Int!
  page: Int!
  pageSize: Int!
}

# Action result type
type ListingActionResult {
  success: Boolean!
  message: String
}

type Query {
  itemListings: [ItemListing!]!
  itemListing(id: ObjectId!): ItemListing
  
  # My Listings queries with pagination and filtering
  myListingsAll(
    page: Int!
    pageSize: Int!
    searchText: String
    statusFilter: [ListingStatus!]
    sortBy: String
    sortOrder: String
  ): ListingAllPage!
  
  myListingsRequests(
    page: Int!
    pageSize: Int!
    searchText: String
    statusFilter: [RequestStatus!]
    sortBy: String
    sortOrder: String
  ): ListingRequestPage!
}

type Mutation {
  # Listing actions (placeholder implementations)
  pauseListing(listingId: String!): ListingActionResult!
  reinstateListing(listingId: String!): ListingActionResult!
  appealListing(listingId: String!, reason: String!): ListingActionResult!
  publishListing(listingId: String!): ListingActionResult!
  editListing(listingId: String!): ListingActionResult!
  deleteListing(listingId: String!): ListingActionResult!
  
  # Request actions (placeholder implementations)
  acceptRequest(requestId: String!): ListingActionResult!
  rejectRequest(requestId: String!): ListingActionResult!
  closeRequest(requestId: String!): ListingActionResult!
  messageRequester(requestId: String!): ListingActionResult!
  deleteRequest(requestId: String!): ListingActionResult!
}