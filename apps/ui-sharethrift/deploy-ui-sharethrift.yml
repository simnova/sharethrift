parameters:
- name: environmentNameDevOps
  type: string
- name: environmentNameBicep
  type: string
- name: vmImageName
  type: string
- name: ServiceConnectionName
  type: string
- name: deploymentDefaultLocation
  type: string
- name: resourceGroupName
  type: string
- name: frontDoorProfileName
  type: string
- name: frontDoorEndpointName
  type: string

jobs:
- job: Infrastructure_UI_ShareThrift
  displayName: Infrastructure Setup (UI ShareThrift)
  condition: and(succeeded(), eq(stageDependencies.Build.Build.outputs['BuildJob.HAS_FRONTEND_CHANGES'], 'true'))
  dependsOn: Infrastructure  # Wait for API infrastructure to complete
  pool:
    vmImage: ${{parameters.vmImageName}}
  steps:
  - task: AzureResourceManagerTemplateDeployment@3
    name: deployInfrastructure
    displayName: 'Deploy UI ShareThrift Infrastructure'
    inputs:
      connectedServiceName: ${{parameters.ServiceConnectionName}}
      deploymentName: $(Build.BuildNumber)-ui
      location: ${{parameters.deploymentDefaultLocation}}
      resourceGroupName: ${{parameters.resourceGroupName}}
      csmFile: apps/ui-sharethrift/iac/main.bicep
      csmParametersFile: apps/ui-sharethrift/iac/${{parameters.environmentNameBicep}}.bicepparam
      deploymentOutputs: 'armOutputs'
  
  - task: PowerShell@2
    name: captureOutputs
    displayName: 'Capture Infrastructure Outputs'
    inputs:
      targetType: 'inline'
      script: |
        Write-Host "Debug - armOutputs: $(armOutputs)"
        $var = ConvertFrom-Json '$(armOutputs)'
        $storageAccountName = $var.storageAccountName.value
        Write-Host "Storage Account Name: $storageAccountName"
        Write-Host "##vso[task.setvariable variable=storageAccountName;isOutput=true]$storageAccountName"

- deployment: Deploy_UI_ShareThrift
  displayName: 'Deploy UI ShareThrift (Static Web App)'
  condition: and(succeeded(), eq(stageDependencies.Build.Build.outputs['BuildJob.HAS_FRONTEND_CHANGES'], 'true'), ne(variables['Build.Reason'], 'PullRequest'))
  dependsOn: Infrastructure_UI_ShareThrift
  environment: ${{parameters.environmentNameDevOps}}
  pool:
    vmImage: ${{parameters.vmImageName}}
  variables:
    storageAccountName: $[ dependencies.Infrastructure_UI_ShareThrift.outputs['captureOutputs.storageAccountName'] ]
  strategy:
    runOnce:
      deploy:
        steps:
        # Get the zip file for with proper environment settings already compiled in it.
        - task: CopyFiles@2
          inputs:
            SourceFolder: '$(Pipeline.Workspace)'
            Contents: '**/ui-sharethrift-$(Build.BuildId).zip'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
            flattenFolders: true

        # Extract the files from the zip file.
        - task: ExtractFiles@1
          inputs:
            archiveFilePatterns: '$(Build.ArtifactStagingDirectory)/ui-sharethrift-$(Build.BuildId).zip'
            destinationFolder: '$(Build.ArtifactStagingDirectory)/deploy'
            cleanDestinationFolder: true
            overwriteExistingFiles: false

        # Temporary workaround to downgrade Azure CLI
        # TODO: remove this task when issue is resolved: https://github.com/Azure/azure-cli/issues/32039#issue
        - task: Bash@3
          displayName: Downgrade Azure CLI to 2.76.0
          inputs:
            targetType: 'inline'
            script: |
              pip install azure-cli==2.76.0 --force-reinstall
              az --version

        # Delete all files in the $web container and replace with extracted files.
        # Purge the Front Door endpoint to ensure the CDN cache is cleared.
        - task: AzureCLI@2
          displayName: Copy to Blob
          inputs:
            azureSubscription: $(ServiceConnectionName)
            scriptType: 'pscore'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az storage blob delete-batch -s `$web --pattern * --account-name $(storageAccountName)
              az storage blob upload-batch --destination `$web --account-name $(storageAccountName) --source $(Build.ArtifactStagingDirectory)/deploy
              az afd endpoint purge --content-paths "/*" --endpoint-name ${{parameters.frontDoorEndpointName}} --profile-name ${{parameters.frontDoorProfileName}} --resource-group ${{parameters.resourceGroupName}}
            addSpnToEnvironment: true