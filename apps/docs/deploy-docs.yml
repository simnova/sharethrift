parameters:
- name: vmImageName
  type: string

jobs:
- job: Deploy_Docs
  displayName: 'Deploy Docs (Static Website)'
  condition: eq(stageDependencies.Build.Build.outputs['BuildJob.HAS_DOCS_CHANGES'], 'true')
  pool:
    vmImage: ${{parameters.vmImageName}}
  steps:
        - checkout: self
          persistCredentials: true
        - task: UseNode@1
          inputs:
            version: '22.x'
          displayName: 'Install Node.js'
        - task: Cache@2
          displayName: 'PNPM: Restore Cache'
          inputs:
            key: 'pnpm | "$(Agent.OS)" | $(Build.SourcesDirectory)/pnpm-lock.yaml'
            restoreKeys: |
              pnpm | "$(Agent.OS)"
            path: $(Pipeline.Workspace)/.pnpm-store
        - task: Bash@3
          displayName: 'Install: PNPM'
          inputs:
            targetType: 'inline'
            script: |
              set -euo pipefail
              echo "Installing PNPM..."
              npm install --global corepack@latest
              corepack enable
              corepack prepare pnpm@latest-10 --activate
              pnpm config set store-dir $(Pipeline.Workspace)/.pnpm-store
        - download: current
          displayName: 'Artifact: Download Docs package'
          artifact: docs
        - task: Bash@3
          displayName: 'Restore Build Artifacts'
          inputs:
            targetType: 'inline'
            script: |
              ARTIFACT_DIR="$(Pipeline.Workspace)/docs"
              ZIP_FILE="$ARTIFACT_DIR/docs-$(Build.BuildId).zip"

              echo "Listing artifact directory: $ARTIFACT_DIR"
              ls -la "$ARTIFACT_DIR"

              if [ ! -f "$ZIP_FILE" ]; then
                echo "Error: Expected artifact zip not found at $ZIP_FILE"
                exit 1
              fi

              echo "Restoring docs build from artifact..."
              rm -rf $(Build.SourcesDirectory)/apps/docs/build
              mkdir -p $(Build.SourcesDirectory)/apps/docs/build

              unzip "$ZIP_FILE" -d temp-docs
              cp -r temp-docs/. $(Build.SourcesDirectory)/apps/docs/build/
              rm -rf temp-docs

              echo "Build artifacts restored successfully"
              ls -la $(Build.SourcesDirectory)/apps/docs/build/
        - task: Bash@3
          displayName: 'Deploy to GitHub Pages'
          inputs:
            targetType: 'inline'
            script: |
              echo "GH_NAME: $(GH_NAME)"
              echo "GH_EMAIL: $(GH_EMAIL)"
              echo "Current directory: $(pwd)"
              echo "Git remote URL:"
              git remote -v

              if [ -z "$(GH_NAME)" ]; then
                echo "Error: GH_NAME is empty or not loaded. Please check the variable group configuration."
                exit 1
              fi
              echo "GH_NAME PRESENT: True"

              if [ -z "$(GH_EMAIL)" ]; then
                echo "Error: GH_EMAIL is empty or not loaded. Please check the variable group configuration."
                exit 1
              fi
              echo "GH_EMAIL PRESENT: True"

              if [ -z "$(GH_TOKEN)" ]; then
                echo "Error: GH_TOKEN is empty or not loaded. Please check the variable group configuration."
                exit 1
              fi
              echo "GH_TOKEN PRESENT: True"

              git config --global user.name "$(GH_NAME)"
              git config --global user.email "$(GH_EMAIL)"

              export GIT_USER=$(GH_NAME)
              export GIT_PASS=$(GH_TOKEN)

              echo "Installing dependencies for deployment..."
              pnpm install --filter @sthrift/docs... --frozen-lockfile

              cd apps/docs

              set -e

              echo "Deploying to GitHub Pages..."
              pnpm run deploy --skip-build

              echo "Deployment completed successfully!"
              #requires GH_TOKEN secret variable with Pages permission with Read/Write access