parameters:
- name: stageName
  displayName: 'Name of the Stage'
  type: string
- name: environmentNameBicep
  displayName: 'Environment Name in Bicep config- dev/qa/uat/prd'
  type: string
- name: environmentNameDevOps
  displayName: 'Environment Name in DevOps- Dev/QA/UAT/Production'
  type: string
- name: vmImageName
  displayName: 'VM Image - ubuntu-latest'
  type: string
- name: ServiceConnectionName
  displayName: 'Service Connection Name'
  type: string
- name: deploymentDefaultLocation
  displayName: 'Default Location for Deployment'
  type: string
- name: resourceGroupName
  displayName: 'Resource Group Name'
  type: string

stages:
- stage: ${{parameters.stageName}}
  displayName: ${{parameters.stageName}} stage
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  jobs:
  - job: Infrastructure
    displayName: Infrastructure Setup
    condition: eq(stageDependencies.Build.BuildJob.outputs['BuildJob.HAS_BACKEND_CHANGES'], 'true')
    pool:
      vmImage: ${{parameters.vmImageName}}
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        connectedServiceName: ${{parameters.ServiceConnectionName}}
        deploymentName: $(Build.BuildNumber)
        location: ${{parameters.deploymentDefaultLocation}}
        resourceGroupName: ${{parameters.resourceGroupName}}
        csmFile: apps/api/iac/main.bicep
        overrideParameters: >
              -environment ${{parameters.environmentNameBicep}}

  - deployment: Deploy_API
    displayName: 'Deploy API (Azure Functions)'
    dependsOn: Infrastructure
    condition: eq(stageDependencies.Build.BuildJob.outputs['BuildJob.HAS_BACKEND_CHANGES'], 'true')
    environment: ${{parameters.environmentNameDevOps}}
    pool:
      vmImage: ${{parameters.vmImageName}}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureFunctionApp@1
            displayName: 'Azure Functions App Deploy: Cellix-func-app'
            inputs:
              azureSubscription: ${{parameters.ServiceConnectionName}}
              appType: 'functionAppLinux'
              appName: 'Cellix-func-app'
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'NODE|22'
              deploymentMethod: 'runFromPackage'

  - deployment: Deploy_Docs
    displayName: 'Deploy Docs (Static Website)'
    condition: eq(stageDependencies.Build.BuildJob.outputs['BuildJob.HAS_DOCS_CHANGES'], 'true')
    environment: ${{parameters.environmentNameDevOps}}
    pool:
      vmImage: ${{parameters.vmImageName}}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureStaticWebApp@0
            displayName: 'Azure Static Web App Deploy: Cellix-docs'
            inputs:
              azure_static_web_apps_api_token: $(deployment-token)
              action: 'Upload'
              app_location: 'apps/docs'
              api_location: ''
              output_location: 'build'
              skip_app_build: false
              build_timeout_in_minutes: 15

  - deployment: Deploy_UI_Community
    displayName: 'Deploy UI Community (Static Web App)'
    condition: eq(stageDependencies.Build.BuildJob.outputs['BuildJob.HAS_FRONTEND_CHANGES'], 'true')
    environment: ${{parameters.environmentNameDevOps}}
    pool:
      vmImage: ${{parameters.vmImageName}}
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureStaticWebApp@0
            displayName: 'Azure Static Web App Deploy: Cellix-ui-sharethrift'
            inputs:
              azure_static_web_apps_api_token: $(deployment-token)
              action: 'Upload'
              app_location: 'apps/ui-sharethrift'
              api_location: ''
              output_location: 'dist'
              skip_app_build: false
              build_timeout_in_minutes: 15