"use strict";(globalThis.webpackChunk_sthrift_docs=globalThis.webpackChunk_sthrift_docs||[]).push([[8168],{6160:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>c,contentTitle:()=>a,default:()=>l,frontMatter:()=>o,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"technical-overview/contexts","title":"Contexts","description":"Execution contexts within Sharethrift framework manage domain-related actions through passport-based security and permissions.","source":"@site/docs/technical-overview/contexts.md","sourceDirName":"technical-overview","slug":"/technical-overview/contexts","permalink":"/docs/technical-overview/contexts","draft":false,"unlisted":false,"editUrl":"https://github.com/simnova/sharethrift/tree/main/packages/docs/docs/technical-overview/contexts.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"Contexts","description":"Execution contexts within Sharethrift framework manage domain-related actions through passport-based security and permissions."},"sidebar":"docsSidebar","previous":{"title":"Domain Driven Design","permalink":"/docs/technical-overview/translate-your-site"},"next":{"title":"Decisions","permalink":"/docs/category/decisions"}}');var i=t(5270),r=t(7678);const o={sidebar_position:3,sidebar_label:"Contexts",description:"Execution contexts within Sharethrift framework manage domain-related actions through passport-based security and permissions."},a="Contexts",c={},p=[{value:"Levels of Abstraction",id:"levels-of-abstraction",level:2},{value:"Domain Execution Context",id:"domain-execution-context",level:3},{value:"Passport Types",id:"passport-types",level:3},{value:"System Passport",id:"system-passport",level:4},{value:"Member Passport",id:"member-passport",level:4},{value:"Staff User Passport",id:"staff-user-passport",level:4},{value:"Guest Passport",id:"guest-passport",level:4},{value:"Usage",id:"usage",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"contexts",children:"Contexts"})}),"\n",(0,i.jsx)(s.p,{children:"Contexts within the Sharethrift framework involve multiple levels of abstraction, primarily focusing on the management and execution of domain-related actions. These contexts are part of a security and permissions framework built around the passport pattern and are integrated with the Domain-Driven Design (DDD) architecture."}),"\n",(0,i.jsx)(s.h2,{id:"levels-of-abstraction",children:"Levels of Abstraction"}),"\n",(0,i.jsx)(s.h3,{id:"domain-execution-context",children:"Domain Execution Context"}),"\n",(0,i.jsxs)(s.p,{children:["The Domain Execution Context is the top-level abstraction responsible for executing any action related to the domain. This context utilizes an instance of ",(0,i.jsx)(s.code,{children:"Passport"})," to manage permissions and ensure that actions are carried out within the correct security protocols. It provides access to the domain data source and maintains security boundaries."]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"interface DomainExecutionContext {\n    passport: Passport;\n    domainDataSource: DomainDataSource;\n}\n"})}),"\n",(0,i.jsx)(s.h3,{id:"passport-types",children:"Passport Types"}),"\n",(0,i.jsx)(s.p,{children:"The Sharethrift framework implements several passport types for different execution contexts:"}),"\n",(0,i.jsx)(s.h4,{id:"system-passport",children:"System Passport"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"SystemPassport"})," is designed for backend communications and system-level operations, such as publishing messages to a queue or performing administrative tasks where elevated privileges are required. It facilitates operations that are internal to the system, providing necessary permissions to execute system-level tasks."]}),"\n",(0,i.jsx)(s.h4,{id:"member-passport",children:"Member Passport"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"MemberPassport"})," is used for authenticated users operating within a specific community context. This passport type manages permissions based on the user's membership role and community-specific access rights."]}),"\n",(0,i.jsx)(s.h4,{id:"staff-user-passport",children:"Staff User Passport"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"StaffUserPassport"})," provides access control for administrative staff users, deferring to role-based permissions for that specific staff user. This is typically used in administrative portals and back-office operations."]}),"\n",(0,i.jsx)(s.h4,{id:"guest-passport",children:"Guest Passport"}),"\n",(0,i.jsxs)(s.p,{children:["The ",(0,i.jsx)(s.code,{children:"GuestPassport"})," serves as a security layer for operations that should be accessible without authentication, such as viewing public data. It defaults to restrictive permissions, providing read-only access to publicly available information."]}),"\n",(0,i.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(s.p,{children:"The passport factory provides convenient methods to create appropriate passport instances based on the execution context:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-typescript",children:"// For guest users (non-authenticated)\nconst guestPassport = PassportFactory.forGuest();\n\n// For authenticated community members\nconst memberPassport = PassportFactory.forMember(endUser, member, community);\n\n// For staff users with administrative privileges\nconst staffPassport = PassportFactory.forStaffUser(staffUser);\n\n// For system-level operations\nconst systemPassport = PassportFactory.forSystem(permissions);\n"})}),"\n",(0,i.jsx)(s.p,{children:"Each passport type provides access to context-specific operations through domain-specific passport interfaces:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"CommunityPassport"})," - Community-related operations"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"ServicePassport"})," - Service management operations"]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"UserPassport"})," - User-related operations"]}),"\n"]}),"\n",(0,i.jsx)(s.p,{children:"This design ensures that all domain operations are executed within appropriate security boundaries while maintaining clean separation of concerns across different execution contexts."})]})}function l(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},7678:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>a});var n=t(9430);const i={},r=n.createContext(i);function o(e){const s=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);